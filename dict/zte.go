// Code generated by radius-dict-gen. DO NOT EDIT.

package dict

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_ZTE_VendorID = 3902
)

func _ZTE_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ZTE_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ZTE_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ZTE_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ZTE_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ZTE_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ZTE_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ZTE_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _ZTE_AddVendor(p, typ, attr)
}

func _ZTE_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ZTE_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ClientDNSPri_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 1, a)
}

func ClientDNSPri_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 1, a)
}

func ClientDNSPri_Get(p *radius.Packet) (value []byte) {
	value, _ = ClientDNSPri_Lookup(p)
	return
}

func ClientDNSPri_GetString(p *radius.Packet) (value string) {
	value, _ = ClientDNSPri_LookupString(p)
	return
}

func ClientDNSPri_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientDNSPri_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientDNSPri_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ClientDNSPri_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ClientDNSPri_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 1, a)
}

func ClientDNSPri_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 1, a)
}

func ClientDNSPri_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 1)
}

func ClientDNSSec_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 2, a)
}

func ClientDNSSec_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 2, a)
}

func ClientDNSSec_Get(p *radius.Packet) (value []byte) {
	value, _ = ClientDNSSec_Lookup(p)
	return
}

func ClientDNSSec_GetString(p *radius.Packet) (value string) {
	value, _ = ClientDNSSec_LookupString(p)
	return
}

func ClientDNSSec_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientDNSSec_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientDNSSec_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ClientDNSSec_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ClientDNSSec_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 2, a)
}

func ClientDNSSec_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 2, a)
}

func ClientDNSSec_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 2)
}

func ContextName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 4, a)
}

func ContextName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 4, a)
}

func ContextName_Get(p *radius.Packet) (value []byte) {
	value, _ = ContextName_Lookup(p)
	return
}

func ContextName_GetString(p *radius.Packet) (value string) {
	value, _ = ContextName_LookupString(p)
	return
}

func ContextName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ContextName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ContextName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ContextName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ContextName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 4, a)
}

func ContextName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 4, a)
}

func ContextName_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 4)
}

type TunnelMaxSessions uint32

var TunnelMaxSessions_Strings = map[TunnelMaxSessions]string{}

func (a TunnelMaxSessions) String() string {
	if str, ok := TunnelMaxSessions_Strings[a]; ok {
		return str
	}
	return "TunnelMaxSessions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelMaxSessions_Add(p *radius.Packet, value TunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 21, a)
}

func TunnelMaxSessions_Get(p *radius.Packet) (value TunnelMaxSessions) {
	value, _ = TunnelMaxSessions_Lookup(p)
	return
}

func TunnelMaxSessions_Gets(p *radius.Packet) (values []TunnelMaxSessions, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelMaxSessions(i))
	}
	return
}

func TunnelMaxSessions_Lookup(p *radius.Packet) (value TunnelMaxSessions, err error) {
	a, ok := _ZTE_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelMaxSessions(i)
	return
}

func TunnelMaxSessions_Set(p *radius.Packet, value TunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 21, a)
}

func TunnelMaxSessions_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 21)
}

type TunnelMaxTunnels uint32

var TunnelMaxTunnels_Strings = map[TunnelMaxTunnels]string{}

func (a TunnelMaxTunnels) String() string {
	if str, ok := TunnelMaxTunnels_Strings[a]; ok {
		return str
	}
	return "TunnelMaxTunnels(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelMaxTunnels_Add(p *radius.Packet, value TunnelMaxTunnels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 22, a)
}

func TunnelMaxTunnels_Get(p *radius.Packet) (value TunnelMaxTunnels) {
	value, _ = TunnelMaxTunnels_Lookup(p)
	return
}

func TunnelMaxTunnels_Gets(p *radius.Packet) (values []TunnelMaxTunnels, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelMaxTunnels(i))
	}
	return
}

func TunnelMaxTunnels_Lookup(p *radius.Packet) (value TunnelMaxTunnels, err error) {
	a, ok := _ZTE_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelMaxTunnels(i)
	return
}

func TunnelMaxTunnels_Set(p *radius.Packet, value TunnelMaxTunnels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 22, a)
}

func TunnelMaxTunnels_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 22)
}

type TunnelWindow uint32

var TunnelWindow_Strings = map[TunnelWindow]string{}

func (a TunnelWindow) String() string {
	if str, ok := TunnelWindow_Strings[a]; ok {
		return str
	}
	return "TunnelWindow(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelWindow_Add(p *radius.Packet, value TunnelWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 24, a)
}

func TunnelWindow_Get(p *radius.Packet) (value TunnelWindow) {
	value, _ = TunnelWindow_Lookup(p)
	return
}

func TunnelWindow_Gets(p *radius.Packet) (values []TunnelWindow, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelWindow(i))
	}
	return
}

func TunnelWindow_Lookup(p *radius.Packet) (value TunnelWindow, err error) {
	a, ok := _ZTE_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelWindow(i)
	return
}

func TunnelWindow_Set(p *radius.Packet, value TunnelWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 24, a)
}

func TunnelWindow_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 24)
}

type TunnelRetransmit uint32

var TunnelRetransmit_Strings = map[TunnelRetransmit]string{}

func (a TunnelRetransmit) String() string {
	if str, ok := TunnelRetransmit_Strings[a]; ok {
		return str
	}
	return "TunnelRetransmit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelRetransmit_Add(p *radius.Packet, value TunnelRetransmit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 25, a)
}

func TunnelRetransmit_Get(p *radius.Packet) (value TunnelRetransmit) {
	value, _ = TunnelRetransmit_Lookup(p)
	return
}

func TunnelRetransmit_Gets(p *radius.Packet) (values []TunnelRetransmit, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelRetransmit(i))
	}
	return
}

func TunnelRetransmit_Lookup(p *radius.Packet) (value TunnelRetransmit, err error) {
	a, ok := _ZTE_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelRetransmit(i)
	return
}

func TunnelRetransmit_Set(p *radius.Packet, value TunnelRetransmit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 25, a)
}

func TunnelRetransmit_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 25)
}

type TunnelCmdTimeout uint32

var TunnelCmdTimeout_Strings = map[TunnelCmdTimeout]string{}

func (a TunnelCmdTimeout) String() string {
	if str, ok := TunnelCmdTimeout_Strings[a]; ok {
		return str
	}
	return "TunnelCmdTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelCmdTimeout_Add(p *radius.Packet, value TunnelCmdTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 26, a)
}

func TunnelCmdTimeout_Get(p *radius.Packet) (value TunnelCmdTimeout) {
	value, _ = TunnelCmdTimeout_Lookup(p)
	return
}

func TunnelCmdTimeout_Gets(p *radius.Packet) (values []TunnelCmdTimeout, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelCmdTimeout(i))
	}
	return
}

func TunnelCmdTimeout_Lookup(p *radius.Packet) (value TunnelCmdTimeout, err error) {
	a, ok := _ZTE_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelCmdTimeout(i)
	return
}

func TunnelCmdTimeout_Set(p *radius.Packet, value TunnelCmdTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 26, a)
}

func TunnelCmdTimeout_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 26)
}

func PPPOEURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 27, a)
}

func PPPOEURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 27, a)
}

func PPPOEURL_Get(p *radius.Packet) (value []byte) {
	value, _ = PPPOEURL_Lookup(p)
	return
}

func PPPOEURL_GetString(p *radius.Packet) (value string) {
	value, _ = PPPOEURL_LookupString(p)
	return
}

func PPPOEURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PPPOEURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PPPOEURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 27, a)
}

func PPPOEURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 27, a)
}

func PPPOEURL_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 27)
}

func PPPOEMOTM_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 28, a)
}

func PPPOEMOTM_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 28, a)
}

func PPPOEMOTM_Get(p *radius.Packet) (value []byte) {
	value, _ = PPPOEMOTM_Lookup(p)
	return
}

func PPPOEMOTM_GetString(p *radius.Packet) (value string) {
	value, _ = PPPOEMOTM_LookupString(p)
	return
}

func PPPOEMOTM_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEMOTM_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEMOTM_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PPPOEMOTM_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PPPOEMOTM_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 28, a)
}

func PPPOEMOTM_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 28, a)
}

func PPPOEMOTM_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 28)
}

type TunnelAlgorithm uint32

var TunnelAlgorithm_Strings = map[TunnelAlgorithm]string{}

func (a TunnelAlgorithm) String() string {
	if str, ok := TunnelAlgorithm_Strings[a]; ok {
		return str
	}
	return "TunnelAlgorithm(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelAlgorithm_Add(p *radius.Packet, value TunnelAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 31, a)
}

func TunnelAlgorithm_Get(p *radius.Packet) (value TunnelAlgorithm) {
	value, _ = TunnelAlgorithm_Lookup(p)
	return
}

func TunnelAlgorithm_Gets(p *radius.Packet) (values []TunnelAlgorithm, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelAlgorithm(i))
	}
	return
}

func TunnelAlgorithm_Lookup(p *radius.Packet) (value TunnelAlgorithm, err error) {
	a, ok := _ZTE_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelAlgorithm(i)
	return
}

func TunnelAlgorithm_Set(p *radius.Packet, value TunnelAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 31, a)
}

func TunnelAlgorithm_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 31)
}

type TunnelDeadtime uint32

var TunnelDeadtime_Strings = map[TunnelDeadtime]string{}

func (a TunnelDeadtime) String() string {
	if str, ok := TunnelDeadtime_Strings[a]; ok {
		return str
	}
	return "TunnelDeadtime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelDeadtime_Add(p *radius.Packet, value TunnelDeadtime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 32, a)
}

func TunnelDeadtime_Get(p *radius.Packet) (value TunnelDeadtime) {
	value, _ = TunnelDeadtime_Lookup(p)
	return
}

func TunnelDeadtime_Gets(p *radius.Packet) (values []TunnelDeadtime, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelDeadtime(i))
	}
	return
}

func TunnelDeadtime_Lookup(p *radius.Packet) (value TunnelDeadtime, err error) {
	a, ok := _ZTE_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelDeadtime(i)
	return
}

func TunnelDeadtime_Set(p *radius.Packet, value TunnelDeadtime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 32, a)
}

func TunnelDeadtime_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 32)
}

type McastSend uint32

var McastSend_Strings = map[McastSend]string{}

func (a McastSend) String() string {
	if str, ok := McastSend_Strings[a]; ok {
		return str
	}
	return "McastSend(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func McastSend_Add(p *radius.Packet, value McastSend) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 33, a)
}

func McastSend_Get(p *radius.Packet) (value McastSend) {
	value, _ = McastSend_Lookup(p)
	return
}

func McastSend_Gets(p *radius.Packet) (values []McastSend, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, McastSend(i))
	}
	return
}

func McastSend_Lookup(p *radius.Packet) (value McastSend, err error) {
	a, ok := _ZTE_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = McastSend(i)
	return
}

func McastSend_Set(p *radius.Packet, value McastSend) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 33, a)
}

func McastSend_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 33)
}

type McastReceive uint32

var McastReceive_Strings = map[McastReceive]string{}

func (a McastReceive) String() string {
	if str, ok := McastReceive_Strings[a]; ok {
		return str
	}
	return "McastReceive(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func McastReceive_Add(p *radius.Packet, value McastReceive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 34, a)
}

func McastReceive_Get(p *radius.Packet) (value McastReceive) {
	value, _ = McastReceive_Lookup(p)
	return
}

func McastReceive_Gets(p *radius.Packet) (values []McastReceive, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, McastReceive(i))
	}
	return
}

func McastReceive_Lookup(p *radius.Packet) (value McastReceive, err error) {
	a, ok := _ZTE_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = McastReceive(i)
	return
}

func McastReceive_Set(p *radius.Packet, value McastReceive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 34, a)
}

func McastReceive_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 34)
}

type McastMaxGroups uint32

var McastMaxGroups_Strings = map[McastMaxGroups]string{}

func (a McastMaxGroups) String() string {
	if str, ok := McastMaxGroups_Strings[a]; ok {
		return str
	}
	return "McastMaxGroups(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func McastMaxGroups_Add(p *radius.Packet, value McastMaxGroups) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 35, a)
}

func McastMaxGroups_Get(p *radius.Packet) (value McastMaxGroups) {
	value, _ = McastMaxGroups_Lookup(p)
	return
}

func McastMaxGroups_Gets(p *radius.Packet) (values []McastMaxGroups, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, McastMaxGroups(i))
	}
	return
}

func McastMaxGroups_Lookup(p *radius.Packet) (value McastMaxGroups, err error) {
	a, ok := _ZTE_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = McastMaxGroups(i)
	return
}

func McastMaxGroups_Set(p *radius.Packet, value McastMaxGroups) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 35, a)
}

func McastMaxGroups_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 35)
}

type AccessType uint32

var AccessType_Strings = map[AccessType]string{}

func (a AccessType) String() string {
	if str, ok := AccessType_Strings[a]; ok {
		return str
	}
	return "AccessType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccessType_Add(p *radius.Packet, value AccessType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 74, a)
}

func AccessType_Get(p *radius.Packet) (value AccessType) {
	value, _ = AccessType_Lookup(p)
	return
}

func AccessType_Gets(p *radius.Packet) (values []AccessType, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 74) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccessType(i))
	}
	return
}

func AccessType_Lookup(p *radius.Packet) (value AccessType, err error) {
	a, ok := _ZTE_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccessType(i)
	return
}

func AccessType_Set(p *radius.Packet, value AccessType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 74, a)
}

func AccessType_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 74)
}

type QoSType uint32

var QoSType_Strings = map[QoSType]string{}

func (a QoSType) String() string {
	if str, ok := QoSType_Strings[a]; ok {
		return str
	}
	return "QoSType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QoSType_Add(p *radius.Packet, value QoSType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 81, a)
}

func QoSType_Get(p *radius.Packet) (value QoSType) {
	value, _ = QoSType_Lookup(p)
	return
}

func QoSType_Gets(p *radius.Packet) (values []QoSType, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 81) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QoSType(i))
	}
	return
}

func QoSType_Lookup(p *radius.Packet) (value QoSType, err error) {
	a, ok := _ZTE_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QoSType(i)
	return
}

func QoSType_Set(p *radius.Packet, value QoSType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 81, a)
}

func QoSType_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 81)
}

func QoSProfileDown_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 82, a)
}

func QoSProfileDown_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 82, a)
}

func QoSProfileDown_Get(p *radius.Packet) (value []byte) {
	value, _ = QoSProfileDown_Lookup(p)
	return
}

func QoSProfileDown_GetString(p *radius.Packet) (value string) {
	value, _ = QoSProfileDown_LookupString(p)
	return
}

func QoSProfileDown_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QoSProfileDown_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QoSProfileDown_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QoSProfileDown_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QoSProfileDown_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 82, a)
}

func QoSProfileDown_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 82, a)
}

func QoSProfileDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 82)
}

type RateCtrlSCRDown uint32

var RateCtrlSCRDown_Strings = map[RateCtrlSCRDown]string{}

func (a RateCtrlSCRDown) String() string {
	if str, ok := RateCtrlSCRDown_Strings[a]; ok {
		return str
	}
	return "RateCtrlSCRDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlSCRDown_Add(p *radius.Packet, value RateCtrlSCRDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 83, a)
}

func RateCtrlSCRDown_Get(p *radius.Packet) (value RateCtrlSCRDown) {
	value, _ = RateCtrlSCRDown_Lookup(p)
	return
}

func RateCtrlSCRDown_Gets(p *radius.Packet) (values []RateCtrlSCRDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 83) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlSCRDown(i))
	}
	return
}

func RateCtrlSCRDown_Lookup(p *radius.Packet) (value RateCtrlSCRDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlSCRDown(i)
	return
}

func RateCtrlSCRDown_Set(p *radius.Packet, value RateCtrlSCRDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 83, a)
}

func RateCtrlSCRDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 83)
}

type RateCtrlBurstDown uint32

var RateCtrlBurstDown_Strings = map[RateCtrlBurstDown]string{}

func (a RateCtrlBurstDown) String() string {
	if str, ok := RateCtrlBurstDown_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstDown_Add(p *radius.Packet, value RateCtrlBurstDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 84, a)
}

func RateCtrlBurstDown_Get(p *radius.Packet) (value RateCtrlBurstDown) {
	value, _ = RateCtrlBurstDown_Lookup(p)
	return
}

func RateCtrlBurstDown_Gets(p *radius.Packet) (values []RateCtrlBurstDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstDown(i))
	}
	return
}

func RateCtrlBurstDown_Lookup(p *radius.Packet) (value RateCtrlBurstDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstDown(i)
	return
}

func RateCtrlBurstDown_Set(p *radius.Packet, value RateCtrlBurstDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 84, a)
}

func RateCtrlBurstDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 84)
}

type RateCtrlPCR uint32

var RateCtrlPCR_Strings = map[RateCtrlPCR]string{}

func (a RateCtrlPCR) String() string {
	if str, ok := RateCtrlPCR_Strings[a]; ok {
		return str
	}
	return "RateCtrlPCR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlPCR_Add(p *radius.Packet, value RateCtrlPCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 86, a)
}

func RateCtrlPCR_Get(p *radius.Packet) (value RateCtrlPCR) {
	value, _ = RateCtrlPCR_Lookup(p)
	return
}

func RateCtrlPCR_Gets(p *radius.Packet) (values []RateCtrlPCR, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 86) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlPCR(i))
	}
	return
}

func RateCtrlPCR_Lookup(p *radius.Packet) (value RateCtrlPCR, err error) {
	a, ok := _ZTE_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlPCR(i)
	return
}

func RateCtrlPCR_Set(p *radius.Packet, value RateCtrlPCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 86, a)
}

func RateCtrlPCR_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 86)
}

type TCPSynRate uint32

var TCPSynRate_Strings = map[TCPSynRate]string{}

func (a TCPSynRate) String() string {
	if str, ok := TCPSynRate_Strings[a]; ok {
		return str
	}
	return "TCPSynRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TCPSynRate_Add(p *radius.Packet, value TCPSynRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 88, a)
}

func TCPSynRate_Get(p *radius.Packet) (value TCPSynRate) {
	value, _ = TCPSynRate_Lookup(p)
	return
}

func TCPSynRate_Gets(p *radius.Packet) (values []TCPSynRate, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 88) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TCPSynRate(i))
	}
	return
}

func TCPSynRate_Lookup(p *radius.Packet) (value TCPSynRate, err error) {
	a, ok := _ZTE_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TCPSynRate(i)
	return
}

func TCPSynRate_Set(p *radius.Packet, value TCPSynRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 88, a)
}

func TCPSynRate_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 88)
}

type RateCtrlSCRUp uint32

var RateCtrlSCRUp_Strings = map[RateCtrlSCRUp]string{}

func (a RateCtrlSCRUp) String() string {
	if str, ok := RateCtrlSCRUp_Strings[a]; ok {
		return str
	}
	return "RateCtrlSCRUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlSCRUp_Add(p *radius.Packet, value RateCtrlSCRUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 89, a)
}

func RateCtrlSCRUp_Get(p *radius.Packet) (value RateCtrlSCRUp) {
	value, _ = RateCtrlSCRUp_Lookup(p)
	return
}

func RateCtrlSCRUp_Gets(p *radius.Packet) (values []RateCtrlSCRUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlSCRUp(i))
	}
	return
}

func RateCtrlSCRUp_Lookup(p *radius.Packet) (value RateCtrlSCRUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlSCRUp(i)
	return
}

func RateCtrlSCRUp_Set(p *radius.Packet, value RateCtrlSCRUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 89, a)
}

func RateCtrlSCRUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 89)
}

type PriorityLevel uint32

var PriorityLevel_Strings = map[PriorityLevel]string{}

func (a PriorityLevel) String() string {
	if str, ok := PriorityLevel_Strings[a]; ok {
		return str
	}
	return "PriorityLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PriorityLevel_Add(p *radius.Packet, value PriorityLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 90, a)
}

func PriorityLevel_Get(p *radius.Packet) (value PriorityLevel) {
	value, _ = PriorityLevel_Lookup(p)
	return
}

func PriorityLevel_Gets(p *radius.Packet) (values []PriorityLevel, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 90) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PriorityLevel(i))
	}
	return
}

func PriorityLevel_Lookup(p *radius.Packet) (value PriorityLevel, err error) {
	a, ok := _ZTE_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PriorityLevel(i)
	return
}

func PriorityLevel_Set(p *radius.Packet, value PriorityLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 90, a)
}

func PriorityLevel_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 90)
}

type RateCtrlBurstUp uint32

var RateCtrlBurstUp_Strings = map[RateCtrlBurstUp]string{}

func (a RateCtrlBurstUp) String() string {
	if str, ok := RateCtrlBurstUp_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstUp_Add(p *radius.Packet, value RateCtrlBurstUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 91, a)
}

func RateCtrlBurstUp_Get(p *radius.Packet) (value RateCtrlBurstUp) {
	value, _ = RateCtrlBurstUp_Lookup(p)
	return
}

func RateCtrlBurstUp_Gets(p *radius.Packet) (values []RateCtrlBurstUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 91) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstUp(i))
	}
	return
}

func RateCtrlBurstUp_Lookup(p *radius.Packet) (value RateCtrlBurstUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstUp(i)
	return
}

func RateCtrlBurstUp_Set(p *radius.Packet, value RateCtrlBurstUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 91, a)
}

func RateCtrlBurstUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 91)
}

type RateCtrlBurstMaxDown uint32

var RateCtrlBurstMaxDown_Strings = map[RateCtrlBurstMaxDown]string{}

func (a RateCtrlBurstMaxDown) String() string {
	if str, ok := RateCtrlBurstMaxDown_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstMaxDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstMaxDown_Add(p *radius.Packet, value RateCtrlBurstMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 92, a)
}

func RateCtrlBurstMaxDown_Get(p *radius.Packet) (value RateCtrlBurstMaxDown) {
	value, _ = RateCtrlBurstMaxDown_Lookup(p)
	return
}

func RateCtrlBurstMaxDown_Gets(p *radius.Packet) (values []RateCtrlBurstMaxDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 92) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstMaxDown(i))
	}
	return
}

func RateCtrlBurstMaxDown_Lookup(p *radius.Packet) (value RateCtrlBurstMaxDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstMaxDown(i)
	return
}

func RateCtrlBurstMaxDown_Set(p *radius.Packet, value RateCtrlBurstMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 92, a)
}

func RateCtrlBurstMaxDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 92)
}

type RateCtrlBurstMaxUp uint32

var RateCtrlBurstMaxUp_Strings = map[RateCtrlBurstMaxUp]string{}

func (a RateCtrlBurstMaxUp) String() string {
	if str, ok := RateCtrlBurstMaxUp_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstMaxUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstMaxUp_Add(p *radius.Packet, value RateCtrlBurstMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 93, a)
}

func RateCtrlBurstMaxUp_Get(p *radius.Packet) (value RateCtrlBurstMaxUp) {
	value, _ = RateCtrlBurstMaxUp_Lookup(p)
	return
}

func RateCtrlBurstMaxUp_Gets(p *radius.Packet) (values []RateCtrlBurstMaxUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 93) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstMaxUp(i))
	}
	return
}

func RateCtrlBurstMaxUp_Lookup(p *radius.Packet) (value RateCtrlBurstMaxUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstMaxUp(i)
	return
}

func RateCtrlBurstMaxUp_Set(p *radius.Packet, value RateCtrlBurstMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 93, a)
}

func RateCtrlBurstMaxUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 93)
}

func QOSProfileUp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 94, a)
}

func QOSProfileUp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 94, a)
}

func QOSProfileUp_Get(p *radius.Packet) (value []byte) {
	value, _ = QOSProfileUp_Lookup(p)
	return
}

func QOSProfileUp_GetString(p *radius.Packet) (value string) {
	value, _ = QOSProfileUp_LookupString(p)
	return
}

func QOSProfileUp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSProfileUp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSProfileUp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QOSProfileUp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QOSProfileUp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 94, a)
}

func QOSProfileUp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 94, a)
}

func QOSProfileUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 94)
}

type TCPLimitNum uint32

var TCPLimitNum_Strings = map[TCPLimitNum]string{}

func (a TCPLimitNum) String() string {
	if str, ok := TCPLimitNum_Strings[a]; ok {
		return str
	}
	return "TCPLimitNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TCPLimitNum_Add(p *radius.Packet, value TCPLimitNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 95, a)
}

func TCPLimitNum_Get(p *radius.Packet) (value TCPLimitNum) {
	value, _ = TCPLimitNum_Lookup(p)
	return
}

func TCPLimitNum_Gets(p *radius.Packet) (values []TCPLimitNum, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 95) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TCPLimitNum(i))
	}
	return
}

func TCPLimitNum_Lookup(p *radius.Packet) (value TCPLimitNum, err error) {
	a, ok := _ZTE_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TCPLimitNum(i)
	return
}

func TCPLimitNum_Set(p *radius.Packet, value TCPLimitNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 95, a)
}

func TCPLimitNum_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 95)
}

type TCPLimitMode uint32

var TCPLimitMode_Strings = map[TCPLimitMode]string{}

func (a TCPLimitMode) String() string {
	if str, ok := TCPLimitMode_Strings[a]; ok {
		return str
	}
	return "TCPLimitMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TCPLimitMode_Add(p *radius.Packet, value TCPLimitMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 96, a)
}

func TCPLimitMode_Get(p *radius.Packet) (value TCPLimitMode) {
	value, _ = TCPLimitMode_Lookup(p)
	return
}

func TCPLimitMode_Gets(p *radius.Packet) (values []TCPLimitMode, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TCPLimitMode(i))
	}
	return
}

func TCPLimitMode_Lookup(p *radius.Packet) (value TCPLimitMode, err error) {
	a, ok := _ZTE_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TCPLimitMode(i)
	return
}

func TCPLimitMode_Set(p *radius.Packet, value TCPLimitMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 96, a)
}

func TCPLimitMode_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 96)
}

type IGMPServiceProfileNum uint32

var IGMPServiceProfileNum_Strings = map[IGMPServiceProfileNum]string{}

func (a IGMPServiceProfileNum) String() string {
	if str, ok := IGMPServiceProfileNum_Strings[a]; ok {
		return str
	}
	return "IGMPServiceProfileNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IGMPServiceProfileNum_Add(p *radius.Packet, value IGMPServiceProfileNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 97, a)
}

func IGMPServiceProfileNum_Get(p *radius.Packet) (value IGMPServiceProfileNum) {
	value, _ = IGMPServiceProfileNum_Lookup(p)
	return
}

func IGMPServiceProfileNum_Gets(p *radius.Packet) (values []IGMPServiceProfileNum, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 97) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IGMPServiceProfileNum(i))
	}
	return
}

func IGMPServiceProfileNum_Lookup(p *radius.Packet) (value IGMPServiceProfileNum, err error) {
	a, ok := _ZTE_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IGMPServiceProfileNum(i)
	return
}

func IGMPServiceProfileNum_Set(p *radius.Packet, value IGMPServiceProfileNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 97, a)
}

func IGMPServiceProfileNum_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 97)
}

type PPPSserviceType uint32

var PPPSserviceType_Strings = map[PPPSserviceType]string{}

func (a PPPSserviceType) String() string {
	if str, ok := PPPSserviceType_Strings[a]; ok {
		return str
	}
	return "PPPSserviceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PPPSserviceType_Add(p *radius.Packet, value PPPSserviceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 101, a)
}

func PPPSserviceType_Get(p *radius.Packet) (value PPPSserviceType) {
	value, _ = PPPSserviceType_Lookup(p)
	return
}

func PPPSserviceType_Gets(p *radius.Packet) (values []PPPSserviceType, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PPPSserviceType(i))
	}
	return
}

func PPPSserviceType_Lookup(p *radius.Packet) (value PPPSserviceType, err error) {
	a, ok := _ZTE_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PPPSserviceType(i)
	return
}

func PPPSserviceType_Set(p *radius.Packet, value PPPSserviceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 101, a)
}

func PPPSserviceType_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 101)
}

type SWPrivilege uint32

var SWPrivilege_Strings = map[SWPrivilege]string{}

func (a SWPrivilege) String() string {
	if str, ok := SWPrivilege_Strings[a]; ok {
		return str
	}
	return "SWPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SWPrivilege_Add(p *radius.Packet, value SWPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 104, a)
}

func SWPrivilege_Get(p *radius.Packet) (value SWPrivilege) {
	value, _ = SWPrivilege_Lookup(p)
	return
}

func SWPrivilege_Gets(p *radius.Packet) (values []SWPrivilege, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SWPrivilege(i))
	}
	return
}

func SWPrivilege_Lookup(p *radius.Packet) (value SWPrivilege, err error) {
	a, ok := _ZTE_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SWPrivilege(i)
	return
}

func SWPrivilege_Set(p *radius.Packet, value SWPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 104, a)
}

func SWPrivilege_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 104)
}

func AccessDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 151, a)
}

func AccessDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 151, a)
}

func AccessDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = AccessDomain_Lookup(p)
	return
}

func AccessDomain_GetString(p *radius.Packet) (value string) {
	value, _ = AccessDomain_LookupString(p)
	return
}

func AccessDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccessDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccessDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccessDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccessDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 151, a)
}

func AccessDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 151, a)
}

func AccessDomain_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 151)
}

func VPNID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 190, a)
}

func VPNID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 190, a)
}

func VPNID_Get(p *radius.Packet) (value []byte) {
	value, _ = VPNID_Lookup(p)
	return
}

func VPNID_GetString(p *radius.Packet) (value string) {
	value, _ = VPNID_LookupString(p)
	return
}

func VPNID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 190) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VPNID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 190) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VPNID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VPNID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VPNID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 190, a)
}

func VPNID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 190, a)
}

func VPNID_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 190)
}

type RateBustDPIR uint32

var RateBustDPIR_Strings = map[RateBustDPIR]string{}

func (a RateBustDPIR) String() string {
	if str, ok := RateBustDPIR_Strings[a]; ok {
		return str
	}
	return "RateBustDPIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateBustDPIR_Add(p *radius.Packet, value RateBustDPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 191, a)
}

func RateBustDPIR_Get(p *radius.Packet) (value RateBustDPIR) {
	value, _ = RateBustDPIR_Lookup(p)
	return
}

func RateBustDPIR_Gets(p *radius.Packet) (values []RateBustDPIR, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 191) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateBustDPIR(i))
	}
	return
}

func RateBustDPIR_Lookup(p *radius.Packet) (value RateBustDPIR, err error) {
	a, ok := _ZTE_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateBustDPIR(i)
	return
}

func RateBustDPIR_Set(p *radius.Packet, value RateBustDPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 191, a)
}

func RateBustDPIR_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 191)
}

type RateBustUPIR uint32

var RateBustUPIR_Strings = map[RateBustUPIR]string{}

func (a RateBustUPIR) String() string {
	if str, ok := RateBustUPIR_Strings[a]; ok {
		return str
	}
	return "RateBustUPIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateBustUPIR_Add(p *radius.Packet, value RateBustUPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 192, a)
}

func RateBustUPIR_Get(p *radius.Packet) (value RateBustUPIR) {
	value, _ = RateBustUPIR_Lookup(p)
	return
}

func RateBustUPIR_Gets(p *radius.Packet) (values []RateBustUPIR, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 192) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateBustUPIR(i))
	}
	return
}

func RateBustUPIR_Lookup(p *radius.Packet) (value RateBustUPIR, err error) {
	a, ok := _ZTE_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateBustUPIR(i)
	return
}

func RateBustUPIR_Set(p *radius.Packet, value RateBustUPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 192, a)
}

func RateBustUPIR_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 192)
}

type RateCtrlPBSDown uint32

var RateCtrlPBSDown_Strings = map[RateCtrlPBSDown]string{}

func (a RateCtrlPBSDown) String() string {
	if str, ok := RateCtrlPBSDown_Strings[a]; ok {
		return str
	}
	return "RateCtrlPBSDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlPBSDown_Add(p *radius.Packet, value RateCtrlPBSDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 202, a)
}

func RateCtrlPBSDown_Get(p *radius.Packet) (value RateCtrlPBSDown) {
	value, _ = RateCtrlPBSDown_Lookup(p)
	return
}

func RateCtrlPBSDown_Gets(p *radius.Packet) (values []RateCtrlPBSDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 202) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlPBSDown(i))
	}
	return
}

func RateCtrlPBSDown_Lookup(p *radius.Packet) (value RateCtrlPBSDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlPBSDown(i)
	return
}

func RateCtrlPBSDown_Set(p *radius.Packet, value RateCtrlPBSDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 202, a)
}

func RateCtrlPBSDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 202)
}

type RateCtrlPBSUp uint32

var RateCtrlPBSUp_Strings = map[RateCtrlPBSUp]string{}

func (a RateCtrlPBSUp) String() string {
	if str, ok := RateCtrlPBSUp_Strings[a]; ok {
		return str
	}
	return "RateCtrlPBSUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlPBSUp_Add(p *radius.Packet, value RateCtrlPBSUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 203, a)
}

func RateCtrlPBSUp_Get(p *radius.Packet) (value RateCtrlPBSUp) {
	value, _ = RateCtrlPBSUp_Lookup(p)
	return
}

func RateCtrlPBSUp_Gets(p *radius.Packet) (values []RateCtrlPBSUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 203) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlPBSUp(i))
	}
	return
}

func RateCtrlPBSUp_Lookup(p *radius.Packet) (value RateCtrlPBSUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlPBSUp(i)
	return
}

func RateCtrlPBSUp_Set(p *radius.Packet, value RateCtrlPBSUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 203, a)
}

func RateCtrlPBSUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 203)
}

type RateCtrlSCRUpV6 uint32

var RateCtrlSCRUpV6_Strings = map[RateCtrlSCRUpV6]string{}

func (a RateCtrlSCRUpV6) String() string {
	if str, ok := RateCtrlSCRUpV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlSCRUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlSCRUpV6_Add(p *radius.Packet, value RateCtrlSCRUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 228, a)
}

func RateCtrlSCRUpV6_Get(p *radius.Packet) (value RateCtrlSCRUpV6) {
	value, _ = RateCtrlSCRUpV6_Lookup(p)
	return
}

func RateCtrlSCRUpV6_Gets(p *radius.Packet) (values []RateCtrlSCRUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 228) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlSCRUpV6(i))
	}
	return
}

func RateCtrlSCRUpV6_Lookup(p *radius.Packet) (value RateCtrlSCRUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 228)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlSCRUpV6(i)
	return
}

func RateCtrlSCRUpV6_Set(p *radius.Packet, value RateCtrlSCRUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 228, a)
}

func RateCtrlSCRUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 228)
}

type RateCtrlBurstUpV6 uint32

var RateCtrlBurstUpV6_Strings = map[RateCtrlBurstUpV6]string{}

func (a RateCtrlBurstUpV6) String() string {
	if str, ok := RateCtrlBurstUpV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstUpV6_Add(p *radius.Packet, value RateCtrlBurstUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 229, a)
}

func RateCtrlBurstUpV6_Get(p *radius.Packet) (value RateCtrlBurstUpV6) {
	value, _ = RateCtrlBurstUpV6_Lookup(p)
	return
}

func RateCtrlBurstUpV6_Gets(p *radius.Packet) (values []RateCtrlBurstUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 229) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstUpV6(i))
	}
	return
}

func RateCtrlBurstUpV6_Lookup(p *radius.Packet) (value RateCtrlBurstUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 229)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstUpV6(i)
	return
}

func RateCtrlBurstUpV6_Set(p *radius.Packet, value RateCtrlBurstUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 229, a)
}

func RateCtrlBurstUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 229)
}

type RateCtrlBurstMaxUpV6 uint32

var RateCtrlBurstMaxUpV6_Strings = map[RateCtrlBurstMaxUpV6]string{}

func (a RateCtrlBurstMaxUpV6) String() string {
	if str, ok := RateCtrlBurstMaxUpV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstMaxUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstMaxUpV6_Add(p *radius.Packet, value RateCtrlBurstMaxUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 230, a)
}

func RateCtrlBurstMaxUpV6_Get(p *radius.Packet) (value RateCtrlBurstMaxUpV6) {
	value, _ = RateCtrlBurstMaxUpV6_Lookup(p)
	return
}

func RateCtrlBurstMaxUpV6_Gets(p *radius.Packet) (values []RateCtrlBurstMaxUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 230) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstMaxUpV6(i))
	}
	return
}

func RateCtrlBurstMaxUpV6_Lookup(p *radius.Packet) (value RateCtrlBurstMaxUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 230)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstMaxUpV6(i)
	return
}

func RateCtrlBurstMaxUpV6_Set(p *radius.Packet, value RateCtrlBurstMaxUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 230, a)
}

func RateCtrlBurstMaxUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 230)
}

type RateCtrlPBSUpV6 uint32

var RateCtrlPBSUpV6_Strings = map[RateCtrlPBSUpV6]string{}

func (a RateCtrlPBSUpV6) String() string {
	if str, ok := RateCtrlPBSUpV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlPBSUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlPBSUpV6_Add(p *radius.Packet, value RateCtrlPBSUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 231, a)
}

func RateCtrlPBSUpV6_Get(p *radius.Packet) (value RateCtrlPBSUpV6) {
	value, _ = RateCtrlPBSUpV6_Lookup(p)
	return
}

func RateCtrlPBSUpV6_Gets(p *radius.Packet) (values []RateCtrlPBSUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 231) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlPBSUpV6(i))
	}
	return
}

func RateCtrlPBSUpV6_Lookup(p *radius.Packet) (value RateCtrlPBSUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 231)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlPBSUpV6(i)
	return
}

func RateCtrlPBSUpV6_Set(p *radius.Packet, value RateCtrlPBSUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 231, a)
}

func RateCtrlPBSUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 231)
}

func QoSProfileUpV6_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 232, a)
}

func QoSProfileUpV6_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 232, a)
}

func QoSProfileUpV6_Get(p *radius.Packet) (value []byte) {
	value, _ = QoSProfileUpV6_Lookup(p)
	return
}

func QoSProfileUpV6_GetString(p *radius.Packet) (value string) {
	value, _ = QoSProfileUpV6_LookupString(p)
	return
}

func QoSProfileUpV6_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 232) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QoSProfileUpV6_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 232) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QoSProfileUpV6_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QoSProfileUpV6_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QoSProfileUpV6_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 232, a)
}

func QoSProfileUpV6_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 232, a)
}

func QoSProfileUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 232)
}

type RateCtrlSCRDownV6 uint32

var RateCtrlSCRDownV6_Strings = map[RateCtrlSCRDownV6]string{}

func (a RateCtrlSCRDownV6) String() string {
	if str, ok := RateCtrlSCRDownV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlSCRDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlSCRDownV6_Add(p *radius.Packet, value RateCtrlSCRDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 233, a)
}

func RateCtrlSCRDownV6_Get(p *radius.Packet) (value RateCtrlSCRDownV6) {
	value, _ = RateCtrlSCRDownV6_Lookup(p)
	return
}

func RateCtrlSCRDownV6_Gets(p *radius.Packet) (values []RateCtrlSCRDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 233) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlSCRDownV6(i))
	}
	return
}

func RateCtrlSCRDownV6_Lookup(p *radius.Packet) (value RateCtrlSCRDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlSCRDownV6(i)
	return
}

func RateCtrlSCRDownV6_Set(p *radius.Packet, value RateCtrlSCRDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 233, a)
}

func RateCtrlSCRDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 233)
}

type RateCtrlBurstDownV6 uint32

var RateCtrlBurstDownV6_Strings = map[RateCtrlBurstDownV6]string{}

func (a RateCtrlBurstDownV6) String() string {
	if str, ok := RateCtrlBurstDownV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstDownV6_Add(p *radius.Packet, value RateCtrlBurstDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 234, a)
}

func RateCtrlBurstDownV6_Get(p *radius.Packet) (value RateCtrlBurstDownV6) {
	value, _ = RateCtrlBurstDownV6_Lookup(p)
	return
}

func RateCtrlBurstDownV6_Gets(p *radius.Packet) (values []RateCtrlBurstDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 234) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstDownV6(i))
	}
	return
}

func RateCtrlBurstDownV6_Lookup(p *radius.Packet) (value RateCtrlBurstDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 234)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstDownV6(i)
	return
}

func RateCtrlBurstDownV6_Set(p *radius.Packet, value RateCtrlBurstDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 234, a)
}

func RateCtrlBurstDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 234)
}

type RateCtrlBurstMaxDownV6 uint32

var RateCtrlBurstMaxDownV6_Strings = map[RateCtrlBurstMaxDownV6]string{}

func (a RateCtrlBurstMaxDownV6) String() string {
	if str, ok := RateCtrlBurstMaxDownV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlBurstMaxDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlBurstMaxDownV6_Add(p *radius.Packet, value RateCtrlBurstMaxDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 235, a)
}

func RateCtrlBurstMaxDownV6_Get(p *radius.Packet) (value RateCtrlBurstMaxDownV6) {
	value, _ = RateCtrlBurstMaxDownV6_Lookup(p)
	return
}

func RateCtrlBurstMaxDownV6_Gets(p *radius.Packet) (values []RateCtrlBurstMaxDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 235) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlBurstMaxDownV6(i))
	}
	return
}

func RateCtrlBurstMaxDownV6_Lookup(p *radius.Packet) (value RateCtrlBurstMaxDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 235)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlBurstMaxDownV6(i)
	return
}

func RateCtrlBurstMaxDownV6_Set(p *radius.Packet, value RateCtrlBurstMaxDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 235, a)
}

func RateCtrlBurstMaxDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 235)
}

type RateCtrlPBSDownV6 uint32

var RateCtrlPBSDownV6_Strings = map[RateCtrlPBSDownV6]string{}

func (a RateCtrlPBSDownV6) String() string {
	if str, ok := RateCtrlPBSDownV6_Strings[a]; ok {
		return str
	}
	return "RateCtrlPBSDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateCtrlPBSDownV6_Add(p *radius.Packet, value RateCtrlPBSDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 236, a)
}

func RateCtrlPBSDownV6_Get(p *radius.Packet) (value RateCtrlPBSDownV6) {
	value, _ = RateCtrlPBSDownV6_Lookup(p)
	return
}

func RateCtrlPBSDownV6_Gets(p *radius.Packet) (values []RateCtrlPBSDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 236) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateCtrlPBSDownV6(i))
	}
	return
}

func RateCtrlPBSDownV6_Lookup(p *radius.Packet) (value RateCtrlPBSDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 236)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateCtrlPBSDownV6(i)
	return
}

func RateCtrlPBSDownV6_Set(p *radius.Packet, value RateCtrlPBSDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 236, a)
}

func RateCtrlPBSDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 236)
}

func QoSProfileDownV6_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 237, a)
}

func QoSProfileDownV6_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 237, a)
}

func QoSProfileDownV6_Get(p *radius.Packet) (value []byte) {
	value, _ = QoSProfileDownV6_Lookup(p)
	return
}

func QoSProfileDownV6_GetString(p *radius.Packet) (value string) {
	value, _ = QoSProfileDownV6_LookupString(p)
	return
}

func QoSProfileDownV6_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 237) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QoSProfileDownV6_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 237) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QoSProfileDownV6_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 237)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QoSProfileDownV6_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 237)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QoSProfileDownV6_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 237, a)
}

func QoSProfileDownV6_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 237, a)
}

func QoSProfileDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 237)
}
